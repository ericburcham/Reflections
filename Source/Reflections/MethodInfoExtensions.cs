using System;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;

using Funky;

namespace Reflections
{
    public static class MethodInfoExtensions
    {
        public static bool IsAutoGenerated(this MethodInfo element)
        {
            element.ThrowIfNull();

            return IsAutoGeneratedMemoized(element);
        }

        public static bool IsNotAutoGenerated(this MethodInfo element)
        {
            return !IsAutoGenerated(element);
        }

        public static bool IsNotOverride(this MethodInfo element)
        {
            return !IsOverride(element);
        }

        public static bool IsOverride(this MethodInfo element)
        {
            element.ThrowIfNull();

            return IsOverrideMemoized(element);
        }

        private static void ThrowIfNull(this MethodInfo element)
        {
            if (element == null)
            {
                throw new ArgumentNullException(nameof(element), "element may not be null.");
            }
        }

        private static readonly Func<MethodInfo, bool> IsAutoGeneratedMemoized =
            ((Func<MethodInfo, bool>)(element => element.GetCustomAttributes<CompilerGeneratedAttribute>(true).Any()))
                .Memoize(true);

        private static readonly Func<MethodInfo, bool> IsOverrideMemoized = ((Func<MethodInfo, bool>)(element =>
            {
                var declaringType = element.DeclaringType;
                var baseDefinitionType = element.GetBaseDefinition().DeclaringType;
                return declaringType != baseDefinitionType;
            })).Memoize(true);
    }
}