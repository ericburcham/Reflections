using FluentAssertions;

using NUnit.Framework;

using Reflections.UnitTests.TestClasses;

namespace Reflections.UnitTests
{
    [TestFixture]
    public class IsAutoGeneratedTests
    {
        [Test]
        public void IsAutoGeneratedReturnsFalseWhenMethodIsNotAutoGenerated()
        {
            // Arrange
            var targetType = typeof(ClassWithOneMethod);
            var targetElement = targetType.GetMethod("DeclaredMethod");

            // Act
            var result = targetElement.IsAutoGenerated();

            // Assert
            result.Should().BeFalse();
        }

        [Test]
        public void IsAutoGeneratedReturnsTrueWhenMethodIsAutoPropertyGetterOrSetter()
        {
            // Arrange
            var targetType = typeof(ClassWithOneAutoProperty);
            var targetProperty = targetType.GetProperty("DeclaredProperty");
            var targetGetterElement = targetProperty.GetGetMethod();
            var targetSetterElement = targetProperty.GetSetMethod();

            // Act
            var getterResult = targetGetterElement.IsAutoGenerated();
            var setterResult = targetSetterElement.IsAutoGenerated();

            // Assert
            getterResult.Should().BeTrue();
            setterResult.Should().BeTrue();
        }

        [Test]
        public void IsAutoGeneratedReturnsTrueWhenMethodIsFieldBackedPropertyGetterOrSetter()
        {
            // Arrange
            var targetType = typeof(ClassWithOneFieldBackedProperty);
            var targetProperty = targetType.GetProperty("DeclaredProperty");
            var targetGetterElement = targetProperty.GetGetMethod();
            var targetSetterElement = targetProperty.GetSetMethod();

            // Act
            var getterResult = targetGetterElement.IsAutoGenerated();
            var setterResult = targetSetterElement.IsAutoGenerated();

            // Assert
            getterResult.Should().BeFalse();
            setterResult.Should().BeFalse();
        }

        [Test]
        public void IsNotAutoGeneratedReturnsFalseWhenMethodIsNotAutoGenerated()
        {
            // Arrange
            var targetType = typeof(ClassWithOneMethod);
            var targetElement = targetType.GetMethod("DeclaredMethod");

            // Act
            var result = targetElement.IsNotAutoGenerated();

            // Assert
            result.Should().BeTrue();
        }

        [Test]
        public void IsNotAutoGeneratedReturnsFalseWhenMethodIsAutoPropertyGetterOrSetter()
        {
            // Arrange
            var targetType = typeof(ClassWithOneAutoProperty);
            var targetProperty = targetType.GetProperty("DeclaredProperty");
            var targetGetterElement = targetProperty.GetGetMethod();
            var targetSetterElement = targetProperty.GetSetMethod();

            // Act
            var getterResult = targetGetterElement.IsNotAutoGenerated();
            var setterResult = targetSetterElement.IsNotAutoGenerated();

            // Assert
            getterResult.Should().BeFalse();
            setterResult.Should().BeFalse();
        }

        [Test]
        public void IsNotAutoGeneratedReturnsTrueWhenMethodIsFieldBackedPropertyGetterOrSetter()
        {
            // Arrange
            var targetType = typeof(ClassWithOneFieldBackedProperty);
            var targetProperty = targetType.GetProperty("DeclaredProperty");
            var targetGetterElement = targetProperty.GetGetMethod();
            var targetSetterElement = targetProperty.GetSetMethod();

            // Act
            var getterResult = targetGetterElement.IsNotAutoGenerated();
            var setterResult = targetSetterElement.IsNotAutoGenerated();

            // Assert
            getterResult.Should().BeTrue();
            setterResult.Should().BeTrue();
        }
    }
}